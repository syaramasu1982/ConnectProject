// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Uksbs.Connect.AutomatedTests.Features.EndToEndTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConnectBasicChecksFeature : object, Xunit.IClassFixture<ConnectBasicChecksFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ConnectBasicChecks.feature"
#line hidden
        
        public ConnectBasicChecksFeature(ConnectBasicChecksFeature.FixtureData fixtureData, Uksbs_Connect_AutomatedTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/EndToEndTests", "Connect Basic Checks", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Dashboard validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Dashboard validation")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformDashboardValidation()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Dashboard validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Then("I should see the Dashboard Items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform P60 access verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform P60 access verification")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformP60AccessVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform P60 access verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Then("I open most recent p60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("I click view all in p60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("I open oldest p60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Payslips access verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Payslips access verification")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformPayslipsAccessVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Payslips access verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
 testRunner.Then("I open most recent payslip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("I click view all in payslips", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("I open oldest payslip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.Then("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Edit Diversity Details")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Edit Diversity Details")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Male", "TOGO", "AMERICA", "English", "Asian - Indian", "Other sexual orientation", "Hindu", new string[0])]
        public void EditDiversityDetails(string gender, string nationality, string nationalitySecondary, string nationalIdentity, string ethnicity, string sexualOrientation, string religious, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("gender", gender);
            argumentsOfScenario.Add("nationality", nationality);
            argumentsOfScenario.Add("nationalitySecondary", nationalitySecondary);
            argumentsOfScenario.Add("nationalIdentity", nationalIdentity);
            argumentsOfScenario.Add("ethnicity", ethnicity);
            argumentsOfScenario.Add("sexualOrientation", sexualOrientation);
            argumentsOfScenario.Add("religious", religious);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit Diversity Details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And(string.Format("I select nationality as \"{0}\"", nationality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And(string.Format("I select nationality secondary as \"{0}\"", nationalitySecondary), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And(string.Format("I select national identity as \"{0}\"", nationalIdentity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And(string.Format("I select ethnicity as \"{0}\"", ethnicity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And(string.Format("I select sexual orientation as \"{0}\"", sexualOrientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("I select religious belieft as \"{0}\"", religious), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Then("I save diversity details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform add contact details")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform add contact details")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("abc@gmail.com", "Email", new string[0])]
        public void PerformAddContactDetails(string contactDetails, string contactMethod, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("contactDetails", contactDetails);
            argumentsOfScenario.Add("contactMethod", contactMethod);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform add contact details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("I click add new contact details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("I enter contact details as \"{0}\"", contactDetails), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And(string.Format("I select contact method as \"{0}\"", contactMethod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.Then("I click save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And("I delete the contact details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.Then("I click save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Edit Disability Details")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Edit Disability Details")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("No", "None", "Diabetic", "test", "None", "Diabetic", "test", "None", "Diabetic", "test", "Yes", "Yes", new string[0])]
        public void EditDisabilityDetails(string disabilityStatus, string reason1, string reasonOther1, string specialRequirements1, string reason2, string reasonOther2, string specialRequirements2, string reason3, string reasonOther3, string specialRequirements3, string grantAccess, string riskAssessment, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("disabilityStatus", disabilityStatus);
            argumentsOfScenario.Add("reason1", reason1);
            argumentsOfScenario.Add("reasonOther1", reasonOther1);
            argumentsOfScenario.Add("specialRequirements1", specialRequirements1);
            argumentsOfScenario.Add("reason2", reason2);
            argumentsOfScenario.Add("reasonOther2", reasonOther2);
            argumentsOfScenario.Add("specialRequirements2", specialRequirements2);
            argumentsOfScenario.Add("reason3", reason3);
            argumentsOfScenario.Add("reasonOther3", reasonOther3);
            argumentsOfScenario.Add("specialRequirements3", specialRequirements3);
            argumentsOfScenario.Add("grantAccess", grantAccess);
            argumentsOfScenario.Add("riskAssessment", riskAssessment);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit Disability Details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And(string.Format("I select disability status as \"{0}\"", disabilityStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And(string.Format("I select reason 1 as \"{0}\"", reason1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And(string.Format("I update reason other 1 as \"{0}\"", reasonOther1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And(string.Format("I update special requirements 1 as \"{0}\"", specialRequirements1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And(string.Format("I select reason 2 as \"{0}\"", reason2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And(string.Format("I update reason other 2 as \"{0}\"", reasonOther2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And(string.Format("I update special requirements 2 as \"{0}\"", specialRequirements2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And(string.Format("I select reason 3 as \"{0}\"", reason3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And(string.Format("I update reason other 3 as \"{0}\"", reasonOther3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And(string.Format("I update special requirements 3 as \"{0}\"", specialRequirements3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And(string.Format("I select grant access to manager as \"{0}\"", grantAccess), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And(string.Format("I select risk assessment carried out as \"{0}\"", riskAssessment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.Then("I save disability details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform update emergency contact details")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform update emergency contact details")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Miss", "Indra", "Rani", "Sister", "123458789", "07701776", "02098987", "1 Chalgrove Road", "2 Chalgrove Road", "3 Chalgrove Road", "Belfast", "Antrim", "BT1 6BD", new string[0])]
        public void PerformUpdateEmergencyContactDetails(string title, string firstName, string lastName, string relationship, string homePhone, string mobilePhone, string workPhone, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("relationship", relationship);
            argumentsOfScenario.Add("homePhone", homePhone);
            argumentsOfScenario.Add("mobilePhone", mobilePhone);
            argumentsOfScenario.Add("workPhone", workPhone);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform update emergency contact details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 106
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And(string.Format("I select  emergency contact Title as \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And(string.Format("I update emergency contact first name as \"{0}\"", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And(string.Format("I update emergency contact last name as \"{0}\"", lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And(string.Format("I select emergency contact relationship as \"{0}\"", relationship), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And(string.Format("I update emergency contact home phone as \"{0}\"", homePhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And(string.Format("I update emergency contact mobile phone as \"{0}\"", mobilePhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And(string.Format("I update emergency contact work phone as \"{0}\"", workPhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("I check primary contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("I uncheck use my address for this person", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.And(string.Format("I can update emergency contact address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And(string.Format("I can update emergency contact address line 2 as \"{0}\"", addressLine2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And(string.Format("I can update emergency contact address line 3 as \"{0}\"", addressLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And(string.Format("I can update emergency contact town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.And(string.Format("I select emergency contact county as \"{0}\"", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.And(string.Format("I can update emergency contact post code as \"{0}\"", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.Then("I can save emergency contact details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform add emergency contact details")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform add emergency contact details")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Miss", "Indraa", "Ranii", "Sister", "123456709", "0770126776", "020989987", "1 Chalgrove Road", "2 Chalgrove Road", "3 Chalgrove Road", "Belfast", "Antrim", "BT1 6BD", new string[0])]
        public void PerformAddEmergencyContactDetails(string title, string firstName, string lastName, string relationship, string homePhone, string mobilePhone, string workPhone, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("relationship", relationship);
            argumentsOfScenario.Add("homePhone", homePhone);
            argumentsOfScenario.Add("mobilePhone", mobilePhone);
            argumentsOfScenario.Add("workPhone", workPhone);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform add emergency contact details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 132
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.And("I click Add new emergency contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.And(string.Format("I select  emergency contact Title as \"{0}\"", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And(string.Format("I update emergency contact first name as \"{0}\"", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And(string.Format("I update emergency contact last name as \"{0}\"", lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And(string.Format("I select emergency contact relationship as \"{0}\"", relationship), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And(string.Format("I update emergency contact home phone as \"{0}\"", homePhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And(string.Format("I update emergency contact mobile phone as \"{0}\"", mobilePhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And(string.Format("I update emergency contact work phone as \"{0}\"", workPhone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And(string.Format("I can update emergency contact address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.And(string.Format("I can update emergency contact address line 2 as \"{0}\"", addressLine2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And(string.Format("I can update emergency contact address line 3 as \"{0}\"", addressLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And(string.Format("I can update emergency contact town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And(string.Format("I select emergency contact county as \"{0}\"", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And(string.Format("I can update emergency contact post code as \"{0}\"", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.Then("I can save emergency contact details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform address change in My Profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform address change in My Profile")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Other", "11 Chalgrove Road", "", "", "Sutton", "", "SM2 5JT", new string[0])]
        public void PerformAddressChangeInMyProfile(string addressType, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressType", addressType);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform address change in My Profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 172
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 173
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And(string.Format("I can select address type as \"{0}\"", addressType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.And(string.Format("I can update address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And(string.Format("I can update address line 2 as \"{0}\"", addressLine2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And(string.Format("I can update address line 3 as \"{0}\"", addressLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And(string.Format("I can update town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And(string.Format("I can select county as \"{0}\"", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And(string.Format("I can update postcode as \"{0}\"", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.And("I click address save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform Add a new address and start date = effective date in my profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Add a new address and start date = effective date in my profile")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Other", "10 Chalgrove Road", "", "", "Sutton", "", "SM2 5JT", "current date", new string[0])]
        public void PerformAddANewAddressAndStartDateEffectiveDateInMyProfile(string addressType, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string startDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressType", addressType);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            argumentsOfScenario.Add("startDate", startDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Add a new address and start date = effective date in my profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 191
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 192
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
 testRunner.And("I click add new address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.And(string.Format("I can select address type as \"{0}\"", addressType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And(string.Format("I can update address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.And(string.Format("I can update address line 2 as \"{0}\"", addressLine2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
 testRunner.And(string.Format("I can update address line 3 as \"{0}\"", addressLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.And(string.Format("I can update town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And(string.Format("I can select county as \"{0}\"", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And(string.Format("I can update postcode as \"{0}\"", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And(string.Format("I select start date as \"{0}\"", startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.And("I click checkbox to make default address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.And("I click address save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform add secondary address and start date <  effective date in my Profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform add secondary address and start date <  effective date in my Profile")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Other", "10 Chalgrove Road", "", "", "Swindon", "", "SN2 5JT", "past date", new string[0])]
        public void PerformAddSecondaryAddressAndStartDateEffectiveDateInMyProfile(string addressType, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string startDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressType", addressType);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            argumentsOfScenario.Add("startDate", startDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform add secondary address and start date <  effective date in my Profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 211
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 213
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
 testRunner.And("I click add new address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.And(string.Format("I can select address type as \"{0}\"", addressType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.And(string.Format("I can update address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And(string.Format("I can update address line 2 as \"{0}\"", addressLine2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.And(string.Format("I can update address line 3 as \"{0}\"", addressLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.And(string.Format("I can update town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.And(string.Format("I can select county as \"{0}\"", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
 testRunner.And(string.Format("I select start date as \"{0}\"", startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform add new address and start date >  effective date in my Profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform add new address and start date >  effective date in my Profile")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("Recruiting", "1 Chalgrove Road", "", "", "Suotton", "", "SM2 5JT", "future date", new string[0])]
        public void PerformAddNewAddressAndStartDateEffectiveDateInMyProfile(string addressType, string addressLine1, string addressLine2, string addressLine3, string town, string county, string postCode, string startDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressType", addressType);
            argumentsOfScenario.Add("addressLine1", addressLine1);
            argumentsOfScenario.Add("addressLine2", addressLine2);
            argumentsOfScenario.Add("addressLine3", addressLine3);
            argumentsOfScenario.Add("town", town);
            argumentsOfScenario.Add("county", county);
            argumentsOfScenario.Add("postCode", postCode);
            argumentsOfScenario.Add("startDate", startDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform add new address and start date >  effective date in my Profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 237
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 238
 testRunner.And("I click on edit my profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.And("I click add new address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
 testRunner.And(string.Format("I can select address type as \"{0}\"", addressType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
 testRunner.And(string.Format("I can update address line 1 as \"{0}\"", addressLine1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("I can update address line 2 as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.And("I can update address line 3 as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And(string.Format("I can update town as \"{0}\"", town), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
 testRunner.And("I can select county as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 246
 testRunner.And(string.Format("I can update postcode as \"{0}\"", postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
 testRunner.And(string.Format("I select start date as \"{0}\"", startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
 testRunner.And("I click address save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Feedback Verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Feedback Verification")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformFeedbackVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Feedback Verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 258
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 259
 testRunner.Then("I verify Feedback message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 260
 testRunner.And("I click UKSBS connect feedback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
 testRunner.Then("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 262
 testRunner.And("I click service request feedback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.Then("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform GDPR Verification")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform GDPR Verification")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformGDPRVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform GDPR Verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 267
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 269
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 270
 testRunner.Then("I click GDPR privacy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.And("I verify GDPR privacy notice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.Then("I click privacy notice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.Then("I click GRPR privacy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Oracle Homepage Access")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Oracle Homepage Access")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformOracleHomepageAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Oracle Homepage Access", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 278
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 280
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 281
 testRunner.When("I click view my responsibilities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 282
 testRunner.Then("New tab will be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
 testRunner.And("I verify EBS home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Side Menu Validations")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Side Menu Validations")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformSideMenuValidations()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Side Menu Validations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 288
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 290
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 291
 testRunner.Then("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 292
 testRunner.When("I click on my oracle homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 293
 testRunner.Then("New tab will be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
 testRunner.And("I verify EBS home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 296
 testRunner.Then("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 297
 testRunner.When("I click on professional qualifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 298
 testRunner.Then("New tab will be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
 testRunner.And("I should see other professional qualifications from EBS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 301
 testRunner.Then("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 302
 testRunner.When("I click on iexpenses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 304
 testRunner.Then("I should see expenses home from EBS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
 testRunner.Then("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
 testRunner.When("I click on Absence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 308
 testRunner.Then("I should see my absense details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 309
 testRunner.And("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
 testRunner.When("I click on manager absence view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
 testRunner.Then("I should see list of my direct reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 312
 testRunner.And("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
 testRunner.When("I click on notifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 314
 testRunner.Then("I should see list of notification and some filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 315
 testRunner.And("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 316
 testRunner.When("I click on team", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
 testRunner.Then("I should see my manager and directs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 318
 testRunner.And("I click on view menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
 testRunner.When("I click on isupport", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 320
 testRunner.Then("New tab will be opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 321
 testRunner.And("I should see iSupport Resources from EBS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 322
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Perform Support Links Access")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform Support Links Access")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        public void PerformSupportLinksAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "smoketest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform Support Links Access", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 326
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 328
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 329
 testRunner.Then("I click raise service request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 330
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 331
 testRunner.Then("I click using UKSBS service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 332
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 333
 testRunner.Then("I click guides to using oracle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 334
 testRunner.And("I close new tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 335
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Perform View My Profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Connect Basic Checks")]
        [Xunit.TraitAttribute("Description", "Perform View My Profile")]
        [Xunit.TraitAttribute("Category", "smoketest")]
        [Xunit.InlineDataAttribute("MARK NORRIS", "Policy Delivery", "Married/Civil Partnership", "NH006561D", "04 JUL 1965", "15030311", "102056", "Mr Keith Hodgkinson", new string[0])]
        public void PerformViewMyProfile(string fullName, string position, string maritalStatus, string niNumber, string dOB, string empNo, string costCenterCode, string lineManager, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "smoketest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fullName", fullName);
            argumentsOfScenario.Add("position", position);
            argumentsOfScenario.Add("maritalStatus", maritalStatus);
            argumentsOfScenario.Add("niNumber", niNumber);
            argumentsOfScenario.Add("DOB", dOB);
            argumentsOfScenario.Add("empNo", empNo);
            argumentsOfScenario.Add("costCenterCode", costCenterCode);
            argumentsOfScenario.Add("lineManager", lineManager);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Perform View My Profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 338
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 340
 testRunner.Given("I login as an employee", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.Then(string.Format("I see my full name as \"{0}\"", fullName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
 testRunner.And(string.Format("I see my position as \"{0}\"", position), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
 testRunner.And("I click on view profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 344
 testRunner.Then(string.Format("I see marital status as \"{0}\"", maritalStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 345
 testRunner.And(string.Format("I see ni number as \"{0}\"", niNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
 testRunner.And(string.Format("I see dob as \"{0}\"", dOB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 347
 testRunner.And(string.Format("I see employee no as \"{0}\"", empNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
 testRunner.And(string.Format("I see cost center code as \"{0}\"", costCenterCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 349
 testRunner.And(string.Format("I see line manager as \"{0}\"", lineManager), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
 testRunner.And("I click on back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 351
 testRunner.Then("I click on logout button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ConnectBasicChecksFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ConnectBasicChecksFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
